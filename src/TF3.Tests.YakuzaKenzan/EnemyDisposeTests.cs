// Copyright (c) 2021 Kaplas
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
namespace TF3.Tests.YakuzaKenzan
{
    using System;
    using NUnit.Framework;
    using TF3.YarhlPlugin.YakuzaKenzan.Converters.EnemyDispose;
    using TF3.YarhlPlugin.YakuzaKenzan.Formats;
    using Yarhl.FileSystem;
    using Yarhl.IO;
    using Yarhl.Media.Text;

    [TestFixture]
    public class EnemyDisposeTests
    {
        // ene_st_gion_3003.bin
        private readonly byte[] _data0 =
        {
            0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x0b, 0xbb, 0x00, 0x00, 0x00, 0xb0,
            0x46, 0x46, 0x1e, 0x01, 0x01, 0x01, 0x00, 0x00, 0xc2, 0x7f, 0xf5, 0xc3, 0xc0, 0x80, 0x51, 0xec,
            0x42, 0x6f, 0x70, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb9, 0x80, 0x00, 0x00, 0x00,
            0x00, 0x0a, 0x03, 0x20, 0x04, 0x00, 0x00, 0x00, 0x08, 0x0d, 0x63, 0x5f, 0x63, 0x6d, 0x5f, 0x63,
            0x68, 0x6f, 0x75, 0x6e, 0x69, 0x6e, 0x62, 0x5f, 0x32, 0x30, 0x61, 0x5f, 0x74, 0x68, 0x69, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0xbc, 0x96, 0xb3, 0x82, 0xb5, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x4f, 0x4e, 0x45, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x04, 0xfa, 0x06, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc2, 0x7f, 0xe1, 0x48, 0xc0, 0x80, 0x51, 0xec,
            0x42, 0x7d, 0x3d, 0x71, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0x00, 0xb9, 0x40, 0x00, 0x00, 0x00,
            0x00, 0x0a, 0x03, 0xe8, 0x4d, 0x01, 0x00, 0x04, 0x06, 0x91, 0x63, 0x5f, 0x6f, 0x6d, 0x5f, 0x30,
            0x35, 0x6d, 0x61, 0x74, 0x61, 0x73, 0x61, 0x62, 0x75, 0x72, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x92, 0x8e, 0x52, 0x96, 0x94, 0x8e, 0x4f,
            0x98, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x5f, 0x62, 0x74, 0x6c, 0x73, 0x74, 0x5f,
            0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x45, 0x5f, 0x30, 0x34,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x57, 0x45, 0x48, 0x4f, 0x52, 0x30, 0x31, 0x33, 0x30, 0x00, 0x00, 0x00,
            0x04, 0xfa, 0x07, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        };

        // ene_st_miya_dojo_0001.bin
        private readonly byte[] _data1 =
        {
            0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb0,
            0x1e, 0x1e, 0x1e, 0x02, 0x02, 0x01, 0x00, 0x00, 0xbd, 0x23, 0xd7, 0x0a, 0x3f, 0x0f, 0x5c, 0x29,
            0xc0, 0x36, 0x66, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb9, 0x80, 0x00, 0x00, 0x00,
            0x00, 0x0a, 0x03, 0x20, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1e, 0x63, 0x5f, 0x63, 0x6d, 0x5f, 0x63,
            0x68, 0x6f, 0x75, 0x6e, 0x69, 0x6e, 0x61, 0x5f, 0x31, 0x73, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0xbc, 0x96, 0xb3, 0x82, 0xb5, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x4f, 0x4e, 0x45, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x04, 0xb2, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        };

        [Test]
        public void NullSourceThrowsException()
        {
            var converter = new Reader();
            _ = Assert.Throws<ArgumentNullException>(() => converter.Convert(null));
        }

        [Test]
        public void ReadEnemyDispose()
        {
            byte[] data = new byte[_data0.Length];

            Array.Copy(_data0, data, _data0.Length);

            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            BinaryFormat binary = new BinaryFormat(ds);

            var converter = new Reader();
            EnemyDispose bin = converter.Convert(binary);

            Assert.IsNotNull(bin);
            Assert.AreEqual(2, bin.EnemyNames.Length);

            Assert.AreEqual("名無し", bin.EnemyNames[0]);
        }

        [Test]
        public void WritingNullSourceThrowsException()
        {
            var converter = new Writer();
            _ = Assert.Throws<ArgumentNullException>(() => converter.Convert(null));
        }

        [Test]
        public void WriteEnemyDispose()
        {
            byte[] data = new byte[_data0.Length];

            Array.Copy(_data0, data, _data0.Length);

            using DataStream expected = DataStreamFactory.FromArray(data, 0, data.Length);
            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            BinaryFormat binary = new BinaryFormat(ds);

            var reader = new Reader();
            EnemyDispose bin = reader.Convert(binary);

            var writer = new Writer();
            BinaryFormat result = writer.Convert(bin);

            Assert.AreEqual(_data0.Length, result.Stream.Length);
        }

        [Test]
        public void ReplaceStrings()
        {
            var container = NodeFactory.CreateContainer("root").GetFormatAs<NodeContainerFormat>();

            byte[] data0 = new byte[_data0.Length];
            Array.Copy(_data0, data0, _data0.Length);

            byte[] data1 = new byte[_data1.Length];
            Array.Copy(_data1, data1, _data1.Length);

            using DataStream ds0 = DataStreamFactory.FromArray(data0, 0, data0.Length);
            container.Root.Add(NodeFactory.FromStream("data0", ds0));
            container.Root.Children[0].TransformWith<Reader>();

            using DataStream ds1 = DataStreamFactory.FromArray(data1, 0, data1.Length);
            container.Root.Add(NodeFactory.FromStream("data1", ds1));
            container.Root.Children[1].TransformWith<Reader>();

            var poWriter = new ExtractStrings();
            Po po = poWriter.Convert(container);

            po.Entries[0].Translated = "Translation test";
            var translator = new Translate();
            translator.Initialize(po);

            container = translator.Convert(container);

            var enemyDispose = container.Root.Children[0].GetFormatAs<EnemyDispose>();

            Assert.AreEqual("Translation test", enemyDispose.EnemyNames[0]);
        }

        [Test]
        public void ExtractStringsFromNullThrowsException()
        {
            var converter = new ExtractStrings();
            _ = Assert.Throws<ArgumentNullException>(() => converter.Convert(null));
        }

        [Test]
        public void TranslateNullThrowsException()
        {
            var converter = new Translate();
            _ = Assert.Throws<ArgumentNullException>(() => converter.Convert(null));
        }
    }
}
