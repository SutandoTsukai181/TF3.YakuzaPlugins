// Copyright (c) 2021 Kaplas
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
namespace TF3.Tests.YakuzaKenzan
{
    using System;
    using NUnit.Framework;
    using TF3.YarhlPlugin.YakuzaKenzan.Converters.Y2007Bin;
    using TF3.YarhlPlugin.YakuzaKenzan.Enums;
    using TF3.YarhlPlugin.YakuzaKenzan.Formats;
    using TF3.YarhlPlugin.YakuzaKenzan.Types;
    using Yarhl.IO;
    using Yarhl.Media.Text;

    [TestFixture]
    public class Y2007BinTests
    {
        // pausepar/pause/correlation_group.bin
        private readonly byte[] _data =
        {
            0x20, 0x07, 0x03, 0x19, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,
            0x8f, 0x8a, 0x91, 0xae, 0x00, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x78, 0x5d,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00,
            0x97, 0x4c, 0x8c, 0xf8, 0x83, 0x56, 0x83, 0x69, 0x83, 0x8a, 0x83, 0x49, 0x83, 0x58, 0x83, 0x65,
            0x81, 0x5b, 0x83, 0x5e, 0x83, 0x58, 0x00, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73,
            0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5d, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00,
            0x90, 0xe0, 0x96, 0xbe, 0x95, 0xb6, 0x00, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5d, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x01, 0xe4, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x8b, 0xcb, 0x90, 0xb6, 0x82, 0xc6, 0x8a, 0xd6, 0x8c, 0x57, 0x8e, 0xd2, 0x00, 0x00,
            0x01, 0x95, 0x90, 0x91, 0xa0, 0x82, 0xc6, 0x8a, 0xd6, 0x8c, 0x57, 0x8e, 0xd2, 0x00, 0x00, 0x02,
            0x93, 0xbf, 0x90, 0xec, 0x89, 0xc6, 0x00, 0x00, 0x03, 0x8b, 0xcb, 0x90, 0xb6, 0x82, 0xc6, 0x8a,
            0xd6, 0x8c, 0x57, 0x8e, 0xd2, 0x00, 0x00, 0x04, 0x93, 0xbf, 0x90, 0xec, 0x96, 0x8b, 0x95, 0x7b,
            0x00, 0x00, 0x05, 0x8b, 0x67, 0x89, 0xaa, 0x93, 0xb9, 0x8f, 0xea, 0x00, 0x00, 0x06, 0x95, 0xf3,
            0x91, 0xa0, 0x89, 0x40, 0x00, 0x00, 0x07, 0x96, 0xf6, 0x90, 0xb6, 0x82, 0xcc, 0x97, 0xa2, 0x00,
            0x80, 0x07, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x08, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
            0x80, 0x08, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
            0x80, 0x08, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
            0x80, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
            0x80, 0x0d, 0x00, 0x09, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0f, 0x00, 0x19, 0xff, 0xff, 0xff, 0xff,
            0x80, 0x12, 0x00, 0x20, 0xff, 0xff, 0xff, 0xff, 0xe2, 0x4c, 0x89, 0x80, 0x82, 0xc5, 0x8a, 0x7c,
            0x89, 0xf4, 0x82, 0xf0, 0x89, 0x63, 0x82, 0xde, 0x8b, 0xcb, 0x90, 0xb6, 0x88, 0xea, 0x94, 0x6e,
            0x94, 0x56, 0x89, 0xee, 0x82, 0xc6, 0x81, 0x41, 0x82, 0xbb, 0x82, 0xcc, 0x8e, 0xfc, 0x88, 0xcd,
            0x82, 0xcc, 0x90, 0x6c, 0x95, 0xa8, 0x81, 0x42, 0x00, 0x8b, 0x7b, 0x96, 0x7b, 0x95, 0x90, 0x91,
            0xa0, 0x82, 0xc6, 0x81, 0x41, 0x82, 0xbb, 0x82, 0xcc, 0x8e, 0xfc, 0x88, 0xcd, 0x82, 0xcc, 0x90,
            0x6c, 0x95, 0xa8, 0x81, 0x42, 0x00, 0x8a, 0xd6, 0x93, 0x8c, 0x92, 0x6e, 0x95, 0xfb, 0x82, 0xf0,
            0x8e, 0xa1, 0x82, 0xdf, 0x82, 0xe9, 0x91, 0xe5, 0x96, 0xbc, 0x89, 0xc6, 0x81, 0x42, 0x8c, 0xbb,
            0x93, 0x96, 0x8e, 0xe5, 0x82, 0xcd, 0x8c, 0xdc, 0x91, 0xe5, 0x98, 0x56, 0x82, 0xcc, 0x88, 0xea,
            0x90, 0x6c, 0x81, 0x41, 0x0a, 0x93, 0xbf, 0x90, 0xec, 0x89, 0xc6, 0x8d, 0x4e, 0x81, 0x42, 0x00,
            0xe2, 0x4c, 0x89, 0x80, 0x82, 0xc5, 0x8a, 0x7c, 0x89, 0xf4, 0x82, 0xf0, 0x89, 0x63, 0x82, 0xde,
            0x8b, 0xcb, 0x90, 0xb6, 0x88, 0xea, 0x94, 0x6e, 0x94, 0x56, 0x89, 0xee, 0x82, 0xc6, 0x81, 0x41,
            0x82, 0xbb, 0x82, 0xcc, 0x8e, 0xfc, 0x88, 0xcd, 0x82, 0xcc, 0x90, 0x6c, 0x95, 0xa8, 0x81, 0x42,
            0x00, 0x8d, 0x5d, 0x8c, 0xcb, 0x82, 0xf0, 0x96, 0x7b, 0x8b, 0x92, 0x92, 0x6e, 0x82, 0xc6, 0x82,
            0xb7, 0x82, 0xe9, 0x8c, 0xbb, 0x90, 0xad, 0x8c, 0xa0, 0x81, 0x42, 0x0a, 0x8f, 0x89, 0x91, 0xe3,
            0x8f, 0xab, 0x8c, 0x52, 0x81, 0x45, 0x89, 0xc6, 0x8d, 0x4e, 0x82, 0xcc, 0x88, 0xf8, 0x91, 0xde,
            0x8c, 0xe3, 0x81, 0x41, 0x0a, 0x8e, 0x4f, 0x92, 0x6a, 0x82, 0xcc, 0x93, 0xbf, 0x90, 0xec, 0x8f,
            0x47, 0x92, 0x89, 0x82, 0xaa, 0x93, 0xf1, 0x91, 0xe3, 0x96, 0xda, 0x8f, 0xab, 0x8c, 0x52, 0x82,
            0xf0, 0x96, 0xb1, 0x82, 0xdf, 0x82, 0xe9, 0x81, 0x42, 0x00, 0x8b, 0x9e, 0x82, 0xc5, 0x8d, 0xc5,
            0x8b, 0xad, 0x82, 0xf0, 0x8c, 0xd6, 0x82, 0xe9, 0x8c, 0x95, 0x8f, 0x70, 0x93, 0xb9, 0x8f, 0xea,
            0x81, 0x42, 0x8c, 0xbb, 0x93, 0x96, 0x8e, 0xe5, 0x82, 0xcd, 0x8b, 0x67, 0x89, 0xaa, 0x90, 0xb4,
            0x8f, 0x5c, 0x98, 0x59, 0x81, 0x42, 0x0a, 0x82, 0xbb, 0x82, 0xcc, 0x92, 0xed, 0x82, 0xcc, 0x8b,
            0x67, 0x89, 0xaa, 0x93, 0x60, 0x8e, 0xb5, 0x98, 0x59, 0x82, 0xaa, 0x8e, 0x74, 0x94, 0xcd, 0x82,
            0xf0, 0x96, 0xb1, 0x82, 0xdf, 0x82, 0xe9, 0x81, 0x42, 0x00, 0x93, 0xde, 0x97, 0xc7, 0x82, 0xcc,
            0x96, 0xbc, 0x96, 0xe5, 0x8e, 0x9b, 0x89, 0x40, 0x81, 0x42, 0x93, 0xf1, 0x91, 0xe3, 0x96, 0xda,
            0x93, 0x96, 0x8e, 0xe5, 0x82, 0xcc, 0x88, 0xfb, 0x8f, 0x77, 0x82, 0xf0, 0x95, 0x4d, 0x93, 0xaa,
            0x82, 0xc9, 0x81, 0x41, 0x0a, 0x91, 0x84, 0x82, 0xcc, 0x92, 0x42, 0x90, 0x6c, 0x82, 0xaa, 0x8f,
            0x57, 0x82, 0xa4, 0x81, 0x42, 0x00, 0x93, 0xde, 0x97, 0xc7, 0x82, 0xc9, 0x82, 0xa0, 0x82, 0xe9,
            0x96, 0xf6, 0x90, 0xb6, 0x90, 0x56, 0x89, 0x41, 0x97, 0xac, 0x82, 0xcc, 0x96, 0x7b, 0x8b, 0x92,
            0x92, 0x6e, 0x81, 0x42, 0x0a, 0x91, 0x6e, 0x8e, 0x6e, 0x8e, 0xd2, 0x82, 0xcc, 0x96, 0xf6, 0x90,
            0xb6, 0x90, 0xce, 0x8f, 0x4d, 0x8d, 0xd6, 0x82, 0xaa, 0x8b, 0x8f, 0x82, 0xf0, 0x8d, 0x5c, 0x82,
            0xa6, 0x82, 0xe9, 0x81, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        };

        [Test]
        public void NullSourceThrowsException()
        {
            var converter = new Reader();
            _ = Assert.Throws<ArgumentNullException>(() => converter.Convert(null));
        }

        [Test]
        public void BadMagicThrowsException()
        {
            byte[] data = new byte[_data.Length];

            Array.Copy(_data, data, _data.Length);
            data[0] = 0x00;

            using DataStream badHeaderDs = DataStreamFactory.FromArray(data, 0, data.Length);
            BinaryFormat binary = new BinaryFormat(badHeaderDs);

            var converter = new Reader();
            _ = Assert.Throws<FormatException>(() => converter.Convert(binary));
        }

        [Test]
        public void ReadY2007Bin()
        {
            byte[] data = new byte[_data.Length];

            Array.Copy(_data, data, _data.Length);

            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            BinaryFormat binary = new BinaryFormat(ds);

            var converter = new Reader();

            Y2007Bin bin = converter.Convert(binary);

            Assert.IsNotNull(bin);
            Assert.AreEqual(3, bin.Columns.Length);
            Assert.AreEqual(8, bin.RowCount);

            var column = bin.Columns[0];

            Assert.IsNotNull(column);
            Assert.AreEqual("所属", column.ColumnName);
            Assert.AreEqual("string_idx]", column.ColumnTypeName);
            Assert.AreEqual(Y2007BinColumnType.StringIndex, column.ColumnType);

            Assert.AreEqual(0, column.ColumnValues[0]);
            Assert.AreEqual("桐生と関係者", column.ColumnStrings[0]);
        }

        [Test]
        public void WritingNullSourceThrowsException()
        {
            var converter = new Writer();
            _ = Assert.Throws<ArgumentNullException>(() => converter.Convert(null));
        }

        [Test]
        public void WriteY2007Bin()
        {
            byte[] data = new byte[_data.Length];

            Array.Copy(_data, data, _data.Length);

            using DataStream expected = DataStreamFactory.FromArray(data, 0, data.Length);
            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            BinaryFormat binary = new BinaryFormat(ds);

            var reader = new Reader();
            Y2007Bin bin = reader.Convert(binary);

            var writer = new Writer();
            BinaryFormat result = writer.Convert(bin);

            var dr = new DataReader(result.Stream)
            {
                Endianness = EndiannessMode.BigEndian,
            };

            result.Stream.Seek(0);
            var header = dr.Read<Y2007BinFileHeader>() as Y2007BinFileHeader;

            Assert.AreEqual(3, header.ColumnCount);
            Assert.AreEqual(8, header.RowCount);
        }

        [Test]
        public void ReplaceStrings()
        {
            byte[] data = new byte[_data.Length];

            Array.Copy(_data, data, _data.Length);

            using DataStream expected = DataStreamFactory.FromArray(data, 0, data.Length);
            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            BinaryFormat binary = new BinaryFormat(ds);

            var reader = new Reader();
            Y2007Bin bin = reader.Convert(binary);

            var poWriter = new ExtractStrings();
            Po po = poWriter.Convert(bin);

            po.Entries[0].Translated = "Translation test";
            var translator = new Translate();
            translator.Initialize(po);

            Y2007Bin binResult = translator.Convert(bin);

            Assert.AreEqual("Translation test", binResult.Columns[0].ColumnStrings[0]);
        }

        [Test]
        public void ExtractStringsFromNullThrowsException()
        {
            var converter = new ExtractStrings();
            _ = Assert.Throws<ArgumentNullException>(() => converter.Convert(null));
        }

        [Test]
        public void TranslateNullThrowsException()
        {
            var converter = new Translate();
            _ = Assert.Throws<ArgumentNullException>(() => converter.Convert(null));
        }

        [Test]
        public void UninitializedTranslateThrowsException()
        {
            byte[] data = new byte[_data.Length];

            Array.Copy(_data, data, _data.Length);

            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            BinaryFormat binary = new BinaryFormat(ds);

            var reader = new Reader();
            Y2007Bin bin = reader.Convert(binary);

            var translator = new Translate();
            _ = Assert.Throws<InvalidOperationException>(() => translator.Convert(bin));
        }
    }
}
